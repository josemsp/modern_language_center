---
import Select from "./Select.astro";
import { getLangFromUrl } from "../i18n/utils";
// Import flag images
import esFlag from "../assets/flags/es.svg";
import enFlag from "../assets/flags/gb.svg";

// Initialize with current language
const currentUrl = new URL(Astro.url);
const currentLang = getLangFromUrl(currentUrl);

// Define the language options
const languageOptions = [
  {
    value: "es",
    label: "Español",
    icon: esFlag,
  },
  {
    value: "en",
    label: "English",
    icon: enFlag,
  },
];

// Find the current language option
const currentOption =
  languageOptions.find((opt) => opt.value === currentLang) ||
  languageOptions[0];
---

<Select id="lang-select" options={languageOptions} current={currentOption} />

<script>
  import { supportedLocales } from "@/i18n/ui";
  import { $lang, setLanguage } from "../stores/lang";

  // Subscribe to language changes
  $lang.subscribe((lang) => {
    const wrapper = document.querySelector("#lang-select");
    if (!wrapper) return;

    // Update the select display
    const option = Array.from(wrapper.querySelectorAll("li")).find(
      (li) => li.getAttribute("data-value") === lang
    );

    if (option) {
      const label = wrapper.querySelector("#current-label");
      const icon = wrapper.querySelector("#current-icon");
      const newLabel = option.textContent?.trim();
      const newIcon = option.querySelector("img")?.src;

      if (label && newLabel) label.textContent = newLabel;
      if (icon && newIcon && icon instanceof HTMLImageElement) {
        icon.src = newIcon;
      }
    }
  });

  document.addEventListener("DOMContentLoaded", () => {
    const wrapper = document.querySelector("#lang-select");
    if (!wrapper) return;

    // Handle language selection
    wrapper.querySelectorAll("li").forEach((item) => {
      item.addEventListener("click", (e) => {
        e.preventDefault();
        const newLang = item.getAttribute("data-value");
        if (!newLang) return;

        // Close the dropdown
        wrapper.querySelector("details")?.removeAttribute("open");

        // Update the store and cookie
        setLanguage(newLang);

        // Navigate to new language
        const currentPath = window.location.pathname;
        const pathWithoutLang = currentPath.split("/").slice(2).join("/");
        const newPath = `/${newLang}/${pathWithoutLang}`;

        window.location.href = newPath;
      });
    });

    // Initialize with current language
    const currentLang = document.documentElement.lang;
    if (currentLang && supportedLocales.includes(currentLang)) {
      $lang.set(currentLang);
    }
  });
</script>

<!-- ---
import Select from "./Select.astro";
import { getLangFromUrl } from "../i18n/utils";
import { $lang } from "../stores/lang";
import { addEventToSelect, updateSelectValue } from "../utils";

// Import flag images
import esFlag from "../assets/flags/es.svg";
import enFlag from "../assets/flags/gb.svg";

// Get current language from URL
const currentUrl = new URL(Astro.url);
const currentLang = getLangFromUrl(currentUrl);
console.log('currentUrl',currentUrl);
console.log('currentLang',currentLang);

// Define the language options
const languageOptions = [
  {
    value: "es",
    label: "Español",
    icon: esFlag,
  },
  {
    value: "en",
    label: "English",
    icon: enFlag,
  },
];

// Find the current language option
const currentOption =
  languageOptions.find((opt) => opt.value === currentLang) ||
  languageOptions[0];
console.log('currentOption',currentOption);
---

<Select id="lang-select" options={languageOptions} current={currentOption} />

<script>
  import { addEventToSelect, updateSelectValue } from "../utils";
  import { $lang } from "../stores/lang";
  import { getLangFromUrl } from "../i18n/utils";

  document.addEventListener("DOMContentLoaded", () => {
    const wrapper = document.querySelector("#lang-select");
    if (!wrapper) return;

    // Update the current language display
    // const updateCurrentLanguage = (lang: string) => {
    //   const option = Array.from(
    //     wrapper.querySelectorAll<HTMLLIElement>("li")
    //   ).find((li: HTMLLIElement) => li.getAttribute("data-value") === lang);

    //   if (option) {
    //     const label = wrapper.querySelector<HTMLElement>("#current-label");
    //     const icon = wrapper.querySelector<HTMLImageElement>("#current-icon");
    //     const newLabel = option.textContent?.trim();
    //     const newIcon = option.querySelector<HTMLImageElement>("img")?.src;

    //     if (label && icon && newLabel && newIcon) {
    //       label.textContent = newLabel;
    //       if (icon instanceof HTMLImageElement) {
    //         icon.src = newIcon;
    //       }
    //     }
    //   }
    // };

    // Set initial language
    // const currentLang = document.documentElement.lang || "es";
    // updateCurrentLanguage(currentLang);
    updateSelectValue(wrapper, getLangFromUrl(new URL(window.location.href)));
    $lang.subscribe((lang) => {
      console.log(lang);
      updateSelectValue(wrapper, lang);
    });

    // Handle language selection - the middleware will handle the cookie
    addEventToSelect(wrapper, (lang) => {
      console.log('lang',lang);
      $lang.set(lang);
      // Just navigate to the new language, middleware will handle the cookie
      window.location.href = `/${lang}/`;
    });
    // wrapper.querySelectorAll("li").forEach((item) => {
    //   item.addEventListener("click", (e) => {
    //     e.preventDefault();
    //     const newLang = item.getAttribute("data-value");
    //     if (!newLang) return;

    //     // Close the dropdown
    //     wrapper.querySelector("details")?.removeAttribute("open");

    //     $lang.set(newLang);
    //     window.location.href = `/${newLang}/`;
    //   });
    // });
  });
</script> -->
