---
interface Button {
  href?: string;
  class?: string;
  target?: string;
  rel?: string;
  variant?: "mlc" | "default" | "outline" | "ghost";
  disabled?: boolean;
  ariaLabel?: string;
}

const {
  href = "#",
  class: className = "",
  target,
  rel = target === "_blank" ? "noopener noreferrer" : undefined,
  variant = "default",
  disabled = false,
  ariaLabel,
} = Astro.props;

// Clases base para el botón
const baseClasses =
  "text-center overflow-hidden transition-all duration-300 cursor-pointer";

// Clases por variante
const variantClasses: Record<string, string> = {
  default: "text-white flex items-center justify-center",
  mlc: "bg-[var(--color-button-mlc-blue-hover)] text-white",
  outline:
    "border-2 border-blue-600 text-blue-600 bg-transparent hover:bg-blue-600 hover:text-white",
  ghost: "text-blue-600 bg-transparent hover:bg-blue-100",
};

// Clases para estado disabled
const disabledClasses = "opacity-50 cursor-not-allowed pointer-events-none";

// Combinar todas las clases
const buttonClasses = [
  baseClasses,
  variant === "mlc" ? "btn-mlc-special" : "",
  variantClasses[variant],
  disabled ? disabledClasses : "",
  className,
]
  .join(" ")
  .trim();

// Determinar el elemento a renderizar (button o a)
const isLink = href && !disabled;
const Tag = isLink ? "a" : "button";
---

{
  isLink ? (
    <Tag
      href={href}
      class={buttonClasses}
      target={target}
      rel={rel}
      aria-label={ariaLabel}
      aria-disabled={disabled}
    >
      {variant === "mlc" ? (
        <>
          <div class="slide">
            <div class="text-primary">
              <span class="text-white">
                <slot name="first-text">Lo quiero</slot>
              </span>
            </div>
          </div>
          <div class="text-secondary">
            <slot name="second-text">¡Cotizar ya!</slot>
          </div>
        </>
      ) : (
        <span>
          <slot>Button</slot>
        </span>
      )}
    </Tag>
  ) : (
    <Tag class={buttonClasses} disabled={disabled} aria-label={ariaLabel}>
      <slot>Button</slot>
    </Tag>
  )
}

<style>
  /* Estilos base para todos los botones */
  .btn-mlc-special {
    position: relative;
    text-decoration: none;
    /* width: 200px; */
    /* height: 60px; */
    border-radius: 30px;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    background-color: var(--color-button-mlc-blue-hover, #2563eb);
  }

  .btn-mlc-special .slide {
    height: 100%;
    width: 100%;
    position: absolute;
    left: 0;
    top: 0;
    transition: left 0.7s ease;
    background: var(--color-button-mlc-blue, #1d4ed8);
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 30px;
  }

  .btn-mlc-special:hover .slide {
    left: -100%;
  }

  .btn-mlc-special .text-secondary {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    transform: scale(0);
    transition: transform 0.7s ease-in-out;
  }

  .btn-mlc-special:hover .text-secondary {
    transform: scale(1);
  }

  /* Mejoras de accesibilidad */
  .btn-mlc-special:focus {
    outline: 2px solid var(--color-button-mlc-blue, #1d4ed8);
    outline-offset: 2px;
  }

  /* Mejora de rendimiento con transform en lugar de left */
  @media (prefers-reduced-motion: reduce) {
    .btn-mlc-special,
    .btn-mlc-special * {
      transition-duration: 0.01ms !important;
    }
  }
</style>
